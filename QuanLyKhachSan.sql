CREATE DATABASE QuanLyKhachSan

USE QuanLyKhachSan

CREATE TABLE LOAIKH (
    MALKH CHAR(6) PRIMARY KEY,
    TENLKH NVARCHAR(40),
    HESOPHUTHU FLOAT
);
GO

CREATE FUNCTION AUTO_KHACHHANGTHU() RETURNS VARCHAR(6)
AS
BEGIN
	DECLARE @ID TINYINT
	IF (SELECT COUNT(KHACHHANGTHU) FROM TILEPHUTHU) = 0 SET @ID = '0'
	ELSE 
		SELECT @ID = MAX(KHACHHANGTHU) FROM TILEPHUTHU
		SET @ID += 1
	RETURN @ID
END
GO

CREATE TABLE KHACHTOIDA (
	KTD INT PRIMARY KEY DEFAULT 3
)
GO

INSERT INTO KHACHTOIDA (KTD) VALUES (3)

CREATE TABLE TILEPHUTHU (
    KHACHHANGTHU TINYINT PRIMARY KEY CONSTRAINT KHACHHANGTHU DEFAULT DBO.AUTO_KHACHHANGTHU(),
    TILEPHUTHU FLOAT
);
GO

CREATE TABLE LOAIPHONG (
    MALP CHAR(6) PRIMARY KEY,
    TENLOAIPHONG NVARCHAR(40),
    DONGIA MONEY
);
GO

CREATE FUNCTION AUTO_MAPHONG() RETURNS VARCHAR(6)
AS
BEGIN
	DECLARE @ID VARCHAR(6)
	IF (SELECT COUNT(MAPHONG) FROM PHONG) = 0 SET @ID = '0'
	ELSE 
		SELECT @ID = MAX(RIGHT(MAPHONG, 3)) FROM PHONG
		SELECT @ID = CASE
			WHEN CONVERT(INT, @ID) >= 0 AND CONVERT(INT, @ID) < 9 THEN 'PH00' + CONVERT(VARCHAR, @ID + 1)
			WHEN CONVERT(INT, @ID) >= 9 THEN 'PH0' + CONVERT(VARCHAR, @ID + 1)
		END
	RETURN @ID
END
GO

CREATE TABLE PHONG (
    MAPHONG CHAR(6) PRIMARY KEY CONSTRAINT MAPHONG DEFAULT DBO.AUTO_MAPHONG(),
    TINHTRANG NVARCHAR(30),
    MALP CHAR(6),
    FOREIGN KEY (MALP) REFERENCES LOAIPHONG(MALP)
);
GO

CREATE FUNCTION AUTO_MAPTP() RETURNS VARCHAR(6)
AS
BEGIN
	DECLARE @ID VARCHAR(6)
	IF (SELECT COUNT(MAPTP) FROM PHIEUTHUEPHONG) = 0 SET @ID = '0'
	ELSE 
		SELECT @ID = MAX(RIGHT(MAPTP, 3)) FROM PHIEUTHUEPHONG
		SELECT @ID = CASE
			WHEN CONVERT(INT, @ID) >= 0 AND CONVERT(INT, @ID) < 9 THEN 'PT00' + CONVERT(VARCHAR, @ID + 1)
			WHEN CONVERT(INT, @ID) >= 9 THEN 'PT0' + CONVERT(VARCHAR, @ID + 1)
		END
	RETURN @ID
END
GO

CREATE TABLE PHIEUTHUEPHONG (
    MAPTP CHAR(6) PRIMARY KEY CONSTRAINT MAPTP DEFAULT DBO.AUTO_MAPTP(),
    NGAYLAPPHIEU DATE,
    MAPHONG CHAR(6),
    FOREIGN KEY (MAPHONG) REFERENCES PHONG(MAPHONG)
);
GO

CREATE TABLE CHITIETPTP(
    MAPTP CHAR(6),
    KHACHHANGTHU TINYINT,
    MALKH CHAR(6),
    TENKHACHHANG NVARCHAR(40),
    CMND CHAR(12),
    DIACHI NVARCHAR(255),
    PRIMARY KEY(MAPTP, KHACHHANGTHU, MALKH),
    FOREIGN KEY (KHACHHANGTHU) REFERENCES TILEPHUTHU(KHACHHANGTHU),
    FOREIGN KEY (MAPTP) REFERENCES PHIEUTHUEPHONG(MAPTP),
    FOREIGN KEY (MALKH) REFERENCES LOAIKH(MALKH)
);
GO

CREATE TRIGGER TRG_CHITIETPTP_KHACHHANGTOIDA
ON CHITIETPTP
INSTEAD OF INSERT
AS
BEGIN
    DECLARE @MAPTP CHAR(6), @KHACHHANGTHU TINYINT, @MALKH CHAR(6), @TENKHACHHANG NVARCHAR(40), @CMND CHAR(12), @DIACHI NVARCHAR(255)

    -- Lấy thông tin từ bảng INSERTED
    SELECT @MAPTP = MAPTP, @MALKH = MALKH, @TENKHACHHANG = TENKHACHHANG, @CMND = CMND, @DIACHI = DIACHI FROM INSERTED

    -- Đếm số lượng khách hàng cho MAPTP đó
	SET @KHACHHANGTHU = (SELECT COUNT(*) FROM CHITIETPTP WHERE MAPTP = @MAPTP) + 1
	DECLARE @KHACHHANGTOIDA INT
	SELECT @KHACHHANGTOIDA = KTD FROM KHACHTOIDA
    -- Kiểm tra số lượng khách hàng và chèn dữ liệu
    IF @KHACHHANGTHU > @KHACHHANGTOIDA
    BEGIN
        -- Nếu vượt quá 3, không cho phép chèn và đưa ra thông báo lỗi
        RAISERROR ('Số lượng khách hàng không được vượt quá 3', 16, 1);
        ROLLBACK TRANSACTION;
    END
    ELSE
    BEGIN
        --Tiến hành INSERT--
		INSERT INTO CHITIETPTP (MAPTP, MALKH, KHACHHANGTHU, TENKHACHHANG, CMND, DIACHI) VALUES (@MAPTP, @MALKH, @KHACHHANGTHU, @TENKHACHHANG, @CMND, @DIACHI)
    END
END
GO

CREATE FUNCTION AUTO_MADV() RETURNS VARCHAR(6)
AS
BEGIN
	DECLARE @ID VARCHAR(6)
	IF (SELECT COUNT(MADV) FROM DICHVU) = 0 SET @ID = '0'
	ELSE 
		SELECT @ID = MAX(RIGHT(MADV, 3)) FROM DICHVU
		SELECT @ID = CASE
			WHEN CONVERT(INT, @ID) >= 0 AND CONVERT(INT, @ID) < 9 THEN 'DV00' + CONVERT(VARCHAR, @ID + 1)
			WHEN CONVERT(INT, @ID) >= 9 THEN 'DV0' + CONVERT(VARCHAR, @ID + 1)
		END
	RETURN @ID
END
GO

CREATE TABLE DICHVU(
    MADV CHAR(6) PRIMARY KEY CONSTRAINT MADV DEFAULT DBO.AUTO_MADV(),
    TENDICHVU NVARCHAR(40),
    TINHTRANG NVARCHAR(30),
    DONGIA MONEY
);
GO

CREATE TABLE CT_DANGKYDV (
    MADV CHAR(6),
    MAPTP CHAR(6),
    NGAYDANGKY DATE,
    DONGIA MONEY,
    PRIMARY KEY(MADV, MAPTP),
    FOREIGN KEY (MADV) REFERENCES DICHVU(MADV),
    FOREIGN KEY (MAPTP) REFERENCES PHIEUTHUEPHONG(MAPTP)
);
GO

--Trigger--
CREATE TRIGGER TRG_DONGIA_CT_DANGKYDV
ON CT_DANGKYDV
AFTER INSERT, UPDATE
AS
BEGIN
    -- Cập nhật DONGIA trong bảng CT_DANGKYDV từ bảng DICHVU
    UPDATE CT
    SET CT.DONGIA = DV.DONGIA
    FROM CT_DANGKYDV AS CT
    INNER JOIN DICHVU AS DV ON CT.MADV = DV.MADV
    WHERE CT.MADV IN (SELECT MADV FROM INSERTED)
END
GO

CREATE FUNCTION AUTO_MAHD() RETURNS VARCHAR(6)
AS
BEGIN
	DECLARE @ID VARCHAR(6)
	IF (SELECT COUNT(MAHD) FROM HOADON) = 0 SET @ID = '0'
	ELSE 
		SELECT @ID = MAX(RIGHT(MAHD, 3)) FROM HOADON
		SELECT @ID = CASE
			WHEN CONVERT(INT, @ID) >= 0 AND CONVERT(INT, @ID) < 9 THEN 'HD00' + CONVERT(VARCHAR, @ID + 1)
			WHEN CONVERT(INT, @ID) >= 9 THEN 'HD0' + CONVERT(VARCHAR, @ID + 1)
		END
	RETURN @ID
END
GO

CREATE TABLE HOADON (
    MAHD CHAR(6) PRIMARY KEY CONSTRAINT MAHD DEFAULT DBO.AUTO_MAHD(),
    NGAYLAPHD DATE,
    KHTHANHTOAN NVARCHAR(40),
    TONGTIEN MONEY DEFAULT 0
);
GO

CREATE TABLE CT_HOADON (
    MAHD CHAR(6),
    MAPTP CHAR(6),
    SONGAYTHUE INT,
    THANHTIEN MONEY,
    PRIMARY KEY(MAHD, MAPTP),
    FOREIGN KEY (MAHD) REFERENCES HOADON(MAHD),
    FOREIGN KEY (MAPTP) REFERENCES PHIEUTHUEPHONG(MAPTP)
);
GO

CREATE TABLE BCDT (
    THANG TINYINT,
    NAM INT,
    TONGDOANHTHU MONEY DEFAULT 0,
    PRIMARY KEY(THANG, NAM)
);
GO

--trigger--
CREATE TRIGGER TRG_HOADON_BCDT
ON HOADON
AFTER INSERT, UPDATE
AS
BEGIN
    DECLARE @NAM INT, @THANG TINYINT, @TONGDOANHTHU MONEY
	-- LẤY NAM và THANG Lập Hóa Đơn--
    SELECT @NAM = YEAR(i.NGAYLAPHD), @THANG = MONTH(i.NGAYLAPHD)
    FROM inserted i
	--Tính TONGDOANHTHU của các hóa đơn trong tháng và năm đó--
	SET @TONGDOANHTHU = (SELECT COUNT(TONGTIEN) FROM HOADON WHERE YEAR(NGAYLAPHD) = @NAM AND MONTH(NGAYLAPHD) = @THANG)

	--Tạo hoặc cập nhập BCDT
	IF NOT EXISTS(SELECT * FROM BCDT WHERE NAM = @NAM AND THANG = @THANG)
	BEGIN
			INSERT INTO BCDT (NAM, THANG) VALUES (@NAM, @THANG)
	END
END
GO

CREATE TABLE CT_BCDT (
    THANG TINYINT,
    NAM INT,
    MALP CHAR(6),
    DOANHTHU MONEY DEFAULT 0,
    TILE FLOAT,
    PRIMARY KEY(THANG, NAM, MALP),
    FOREIGN KEY (THANG, NAM) REFERENCES BCDT(THANG, NAM),
);
GO

--TRIGER--
CREATE TRIGGER TRG_CTHD
ON CT_HOADON
AFTER INSERT, UPDATE
AS
BEGIN
    --Lấy MAPTP và MAHD từ bản ghi vừa INSERT hoặc cập UPDATE--
    DECLARE @MAPTP CHAR(6), @MAHD CHAR(6)
    SELECT @MAPTP = MAPTP, @MAHD = MAHD
    FROM inserted

	-- Lấy SONGAYTHUE--
	DECLARE @SONGAYTHUE INT
	SELECT @SONGAYTHUE = DATEDIFF(DAY, PT.NGAYLAPPHIEU, HD.NGAYLAPHD)
    FROM CT_HOADON AS CT
    INNER JOIN HOADON AS HD ON CT.MAHD = HD.MAHD
    INNER JOIN PHIEUTHUEPHONG AS PT ON CT.MAPTP = PT.MAPTP
    WHERE CT.MAHD = @MAHD AND CT.MAPTP = @MAPTP

	if (@SONGAYTHUE = 0)
		SET @SONGAYTHUE = 1;

    -- Cập nhật SONGAYTHUE trong bảng CTHD--
    UPDATE CT
    SET CT.SONGAYTHUE = @SONGAYTHUE
	FROM CT_HOADON AS CT
    INNER JOIN HOADON AS HD ON CT.MAHD = HD.MAHD
    INNER JOIN PHIEUTHUEPHONG AS PT ON CT.MAPTP = PT.MAPTP
    WHERE CT.MAHD = @MAHD AND CT.MAPTP = @MAPTP


    -- Lấy TYLEPHUTHU--
    DECLARE @TILEPHUTHU FLOAT
    SELECT @TILEPHUTHU = (1 + TILEPHUTHU) FROM TILEPHUTHU 
    WHERE TILEPHUTHU.KHACHHANGTHU = (SELECT COUNT(*) FROM CHITIETPTP WHERE CHITIETPTP.MAPTP = @MAPTP)
	if (@TILEPHUTHU IS NULL)
		SET @TILEPHUTHU = 1;

    --Lấy DONGIA LOAIPHONG--
    DECLARE @DONGIA_LP MONEY
    SELECT @DONGIA_LP = lp.DONGIA FROM LOAIPHONG lp 
    JOIN PHONG p ON p.MALP = lp.MALP
    JOIN PHIEUTHUEPHONG ptp ON ptp.MAPHONG = p.MAPHONG
    WHERE ptp.MAPTP = @MAPTP

	if (@DONGIA_LP IS NULL)
		SET @DONGIA_LP = 0;

    -- Lấy HESOPHUTHU LKH--
    DECLARE @HESOPHUTHU FLOAT
	SELECT @HESOPHUTHU = ISNULL(MAX(lkh.HESOPHUTHU), 1)
	FROM LOAIKH lkh
	WHERE lkh.MALKH IN (
		SELECT lkh2.MALKH
		FROM LOAIKH lkh2
		JOIN CHITIETPTP ctptp ON lkh2.MALKH = ctptp.MALKH
		WHERE ctptp.MAPTP = @MAPTP);

    -- Lấy DONGIA CT_DANGKYDV--
    DECLARE @DONGIA_DV MONEY
    SELECT @DONGIA_DV = SUM(cd.DONGIA) FROM CT_DANGKYDV cd WHERE cd.MAPTP = @MAPTP
    IF (@DONGIA_DV IS NULL) 
        SET @DONGIA_DV = 0

    -- Tính THANHTIEN--
    DECLARE @THANHTIEN MONEY
    SET @THANHTIEN = ((@SONGAYTHUE * @DONGIA_LP) * @TILEPHUTHU * @HESOPHUTHU) + @DONGIA_DV

    -- UPDATE THANHTIEN TRONG CT_HOADON--
    UPDATE CT_HOADON
    SET THANHTIEN = @THANHTIEN
    WHERE MAHD = @MAHD AND MAPTP = @MAPTP

	IF (@DONGIA_DV IS NULL) 
        SET @DONGIA_DV = 0
	
    UPDATE HOADON
    SET TONGTIEN += @THANHTIEN
    WHERE MAHD = @MAHD
	
	-- Lấy NAM, THANG lập hóa đơn và MALP của Hóa đơn đó--
	DECLARE @NAM INT, @THANG TINYINT, @MALP CHAR(6), @DOANHTHU MONEY
    SELECT @NAM = YEAR(hd.NGAYLAPHD), @THANG = MONTH(hd.NGAYLAPHD), @MALP = lp.MALP
    FROM inserted i JOIN HOADON hd ON i.MAHD = hd.MAHD
	JOIN PHIEUTHUEPHONG ptp ON ptp.MAPTP = i.MAPTP
	JOIN PHONG p ON p.MAPHONG = ptp.MAPHONG
	JOIN LOAIPHONG lp ON lp.MALP = p.MALP
	
	--INSERT hoặc UPDATE CT_BCDT--
	IF NOT EXISTS (SELECT * FROM CT_BCDT WHERE NAM = @NAM AND THANG = @THANG AND MALP = @MALP)
	BEGIN
		INSERT INTO CT_BCDT (THANG, NAM, MALP, DOANHTHU) VALUES (@THANG, @NAM, @MALP, @THANHTIEN)
	END
	ELSE
	BEGIN
		UPDATE CT_BCDT
		SET DOANHTHU += @THANHTIEN
		WHERE NAM = @NAM AND THANG = @THANG AND MALP = @MALP
	END
END
GO

--TRG INSERT, UPDATE CT_BCDT
CREATE TRIGGER TRI_CT_BCDT
ON CT_BCDT
AFTER INSERT, UPDATE
AS
BEGIN
	DECLARE @THANG TINYINT, @NAM INT, @MALP CHAR(6), @TONGDOANHTHU MONEY, @DOANHTHU MONEY
	SELECT @THANG = i.THANG, @NAM = i.NAM, @MALP = i.MALP, @DOANHTHU = DOANHTHU FROM inserted i

	SELECT @TONGDOANHTHU = SUM(DOANHTHU) FROM CT_BCDT
	WHERE NAM = @NAM AND THANG = @THANG
	DECLARE @TILE FLOAT

	IF @TONGDOANHTHU > 0
	BEGIN
		SET @TILE = CONVERT(FLOAT, @DOANHTHU) / @TONGDOANHTHU
	END
	ELSE
	BEGIN
		SET @TILE = 0
	END
	UPDATE CT_BCDT
	SET TILE = @TILE
	WHERE NAM = @NAM AND THANG = @THANG AND MALP = @MALP
	--UPADATE tổng doanh thu của hóa đơn tháng đó--
	UPDATE BCDT
	SET TONGDOANHTHU = @TONGDOANHTHU
	WHERE NAM = @NAM AND THANG = @THANG
END
GO

--TRG LOAIPHONG DELETE
CREATE TRIGGER TRI_LOAIPHONG_DELETE
ON LOAIPHONG
INSTEAD OF DELETE
AS
BEGIN
    DECLARE @MALP CHAR(6)
    
    DECLARE deleted_cursor CURSOR FOR 
    SELECT MALP FROM deleted
    
    OPEN deleted_cursor
    FETCH NEXT FROM deleted_cursor INTO @MALP
    
    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Select related data first
        DECLARE @MAPHONG CHAR(6)
        DECLARE @MAPTP CHAR(6)
        DECLARE @MAHD CHAR(6)

        DECLARE phongs_cursor CURSOR FOR 
        SELECT MAPHONG FROM PHONG WHERE MALP = @MALP
        
        OPEN phongs_cursor
        FETCH NEXT FROM phongs_cursor INTO @MAPHONG

        WHILE @@FETCH_STATUS = 0
        BEGIN
            DECLARE pthue_cursor CURSOR FOR 
            SELECT MAPTP FROM PHIEUTHUEPHONG WHERE MAPHONG = @MAPHONG

            OPEN pthue_cursor
            FETCH NEXT FROM pthue_cursor INTO @MAPTP

            WHILE @@FETCH_STATUS = 0
            BEGIN
                -- Get related invoice ID
                SELECT @MAHD = MAHD FROM CT_HOADON WHERE MAPTP = @MAPTP
                
                -- Perform deletions in the correct order
                DELETE FROM CHITIETPTP WHERE MAPTP = @MAPTP
                DELETE FROM CT_HOADON WHERE MAPTP = @MAPTP
                DELETE FROM CT_DANGKYDV WHERE MAPTP = @MAPTP
                
                IF @MAHD IS NOT NULL
                BEGIN
                    DELETE FROM HOADON WHERE MAHD = @MAHD
                END

                DELETE FROM PHIEUTHUEPHONG WHERE MAPTP = @MAPTP
                
                FETCH NEXT FROM pthue_cursor INTO @MAPTP
            END

            CLOSE pthue_cursor
            DEALLOCATE pthue_cursor
            
            DELETE FROM PHONG WHERE MAPHONG = @MAPHONG
            
            FETCH NEXT FROM phongs_cursor INTO @MAPHONG
        END

        CLOSE phongs_cursor
        DEALLOCATE phongs_cursor
        
        -- Finally delete from LOAIPHONG
        DELETE FROM LOAIPHONG WHERE MALP = @MALP
        
        FETCH NEXT FROM deleted_cursor INTO @MALP
    END
    
    CLOSE deleted_cursor
    DEALLOCATE deleted_cursor
END
GO

--TRG LOAIKH DELETE
CREATE TRIGGER TRI_LOAIKH_DELETE
ON LOAIKH
INSTEAD OF DELETE
AS
BEGIN
	DECLARE @MALKH CHAR(6), @MAPTP CHAR(6), @MAHD CHAR(6), @MADV CHAR(6)
	SELECT @MALKH = MALKH FROM deleted
	SELECT @MAPTP = MAPTP FROM CHITIETPTP WHERE MALKH = @MALKH
	SELECT @MAHD = MAHD FROM CT_HOADON WHERE MAPTP = @MAPTP
	DELETE FROM CHITIETPTP WHERE MALKH = @MALKH
	DELETE FROM CT_HOADON WHERE MAPTP = @MAPTP
	DELETE FROM HOADON WHERE MAHD = @MAHD
	DELETE FROM CT_DANGKYDV WHERE MAPTP = @MAPTP
	DELETE FROM PHIEUTHUEPHONG WHERE MAPTP = @MAPTP
	DELETE FROM LOAIKH WHERE MALKH = @MALKH
END
GO

--TRG TRI_PHONG_DELETE
CREATE TRIGGER TRI_PHONG_DELETE
ON PHONG
INSTEAD OF DELETE
AS
BEGIN
	DECLARE @MAPTP CHAR(6), @MAHD CHAR(6), @MADV CHAR(6), @MAPHONG CHAR(6)
	SELECT @MAPHONG = MAPHONG FROM deleted
	SELECT @MAPTP = MAPTP FROM PHIEUTHUEPHONG WHERE MAPHONG = @MAPHONG
	SELECT @MAHD = MAHD FROM CT_HOADON WHERE MAPTP = @MAPTP
	DELETE FROM CHITIETPTP WHERE MAPTP = @MAPTP
	DELETE FROM CT_HOADON WHERE MAPTP = @MAPTP
	DELETE FROM HOADON WHERE MAHD = @MAHD
	DELETE FROM CT_DANGKYDV WHERE MAPTP = @MAPTP
	DELETE FROM PHIEUTHUEPHONG WHERE MAPTP = @MAPTP
	DELETE FROM PHONG WHERE MAPHONG = @MAPHONG
END
GO

--TRG TRI_DICHVU_DELETE
CREATE TRIGGER TRI_DICHVU_DELETE
ON DICHVU
INSTEAD OF DELETE
AS
BEGIN
	DECLARE @MAPTP CHAR(6), @MAHD CHAR(6), @MADV CHAR(6)
	SELECT @MADV = MADV FROM deleted
	SELECT @MAPTP = MAPTP FROM CT_DANGKYDV WHERE MADV = @MADV
	SELECT @MAHD = MAHD FROM CT_HOADON WHERE MAPTP = @MAPTP
	DELETE FROM CHITIETPTP WHERE MAPTP = @MAPTP
	DELETE FROM CT_HOADON WHERE MAPTP = @MAPTP
	DELETE FROM HOADON WHERE MAHD = @MAHD
	DELETE FROM CT_DANGKYDV WHERE MAPTP = @MAPTP
	DELETE FROM PHIEUTHUEPHONG WHERE MAPTP = @MAPTP
	DELETE FROM DICHVU WHERE MADV = @MADV
END
GO

--TRG TILEPHUTHU DELETE
CREATE TRIGGER TRI_TILEPHUTHU_INSERT
ON TILEPHUTHU
AFTER INSERT
AS
BEGIN
	DECLARE @SOKTD INT
	SELECT @SOKTD = KHACHHANGTHU FROM inserted
	UPDATE KHACHTOIDA
	SET KTD = @SOKTD
END
GO

--TRG TILEPHUTHU DELETE
CREATE TRIGGER TRI_TILEPHUTHU_DELETE
ON TILEPHUTHU
INSTEAD OF DELETE
AS
BEGIN
	DECLARE @MAPTP CHAR(6), @MAHD CHAR(6), @MADV CHAR(6), @KHACHHANGTHU INT
	SELECT @KHACHHANGTHU = KHACHHANGTHU FROM deleted
	SELECT @MAPTP = PHIEUTHUEPHONG.MAPTP FROM PHIEUTHUEPHONG
	JOIN (SELECT COUNT(*) AS SOL, MAPTP FROM CHITIETPTP GROUP BY MAPTP) ctp
	ON PHIEUTHUEPHONG.MAPTP = ctp.MAPTP 
	WHERE ctp.SOL = @KHACHHANGTHU
	SELECT @MAHD = MAHD FROM CT_HOADON WHERE MAPTP = @MAPTP
	DELETE FROM CHITIETPTP WHERE MAPTP = @MAPTP
	DELETE FROM CT_HOADON WHERE MAPTP = @MAPTP
	DELETE FROM HOADON WHERE MAHD = @MAHD
	DELETE FROM CT_DANGKYDV WHERE MAPTP = @MAPTP
	DELETE FROM PHIEUTHUEPHONG WHERE MAPTP = @MAPTP
	DELETE FROM TILEPHUTHU WHERE KHACHHANGTHU = @KHACHHANGTHU
	UPDATE KHACHTOIDA
	SET KTD = (@KHACHHANGTHU - 1)
END
GO

--TRG PHIEUTHUEPHONG DELETE
CREATE TRIGGER TRI_PHIEUTHUEPHONG_DELETE
ON PHIEUTHUEPHONG
INSTEAD OF DELETE
AS
BEGIN
    DECLARE @MAPTP CHAR(6), @MAHD CHAR(6)

    SELECT @MAPTP = MAPTP FROM deleted
    IF EXISTS (SELECT 1 FROM CT_HOADON WHERE MAPTP = @MAPTP)
    BEGIN
        SELECT @MAHD = MAHD FROM CT_HOADON WHERE MAPTP = @MAPTP
        DELETE FROM CHITIETPTP WHERE MAPTP = @MAPTP
        DELETE FROM CT_HOADON WHERE MAPTP = @MAPTP
        DELETE FROM HOADON WHERE MAHD = @MAHD
        DELETE FROM CT_DANGKYDV WHERE MAPTP = @MAPTP
    END
    DELETE FROM PHIEUTHUEPHONG WHERE MAPTP = @MAPTP
END
GO

--TRG HOADON DELETE
CREATE TRIGGER TRI_HOADON_DELETE
ON HOADON
INSTEAD OF DELETE
AS
BEGIN
	DELETE FROM CT_HOADON
	WHERE MAHD IN (SELECT MAHD FROM deleted)

	DELETE FROM HOADON
	WHERE MAHD IN (SELECT MAHD FROM deleted)
END
GO

--TRG CT_HD DELETE
CREATE TRIGGER TRI_CT_HOADON_DELETE
ON CT_HOADON
AFTER DELETE
AS
BEGIN
	DECLARE @MAHD CHAR(6), @THANHTHIEN MONEY
	SELECT @MAHD = MAHD, @THANHTHIEN = THANHTIEN FROM deleted

	-- Lấy NAM, THANG lập hóa đơn và MALP của Hóa đơn đó--
	DECLARE @NAM INT, @THANG TINYINT, @MALP CHAR(6)
    SELECT @NAM = YEAR(hd.NGAYLAPHD), @THANG = MONTH(hd.NGAYLAPHD), @MALP = lp.MALP
    FROM deleted d JOIN HOADON hd ON d.MAHD = hd.MAHD
	JOIN PHIEUTHUEPHONG ptp ON ptp.MAPTP = d.MAPTP
	JOIN PHONG p ON p.MAPHONG = ptp.MAPHONG
	JOIN LOAIPHONG lp ON lp.MALP = p.MALP

	UPDATE CT_BCDT
	SET DOANHTHU -= @THANHTHIEN
	WHERE THANG = @THANG AND NAM = @NAM AND MALP = @MALP
END
GO

--insert--
-- Insert data into LOAIKH
INSERT INTO LOAIKH (MALKH, TENLKH, HESOPHUTHU) VALUES ('VN', N'Khách nội địa', 1);
INSERT INTO LOAIKH (MALKH, TENLKH, HESOPHUTHU) VALUES ('NN', N'Khách nước ngoài', 1.5);
GO

-- Insert data into TILEPHUTHU
INSERT INTO TILEPHUTHU (KHACHHANGTHU, TILEPHUTHU) VALUES (1, 0);
INSERT INTO TILEPHUTHU (KHACHHANGTHU, TILEPHUTHU) VALUES (2, 0);
INSERT INTO TILEPHUTHU (KHACHHANGTHU, TILEPHUTHU) VALUES (3, 0.25);
GO

-- Insert data into LOAIPHONG
INSERT INTO LOAIPHONG (MALP, TENLOAIPHONG, DONGIA) VALUES ('A', N'Phòng loại A', 150000);
INSERT INTO LOAIPHONG (MALP, TENLOAIPHONG, DONGIA) VALUES ('B', N'Phòng loại B', 170000);
INSERT INTO LOAIPHONG (MALP, TENLOAIPHONG, DONGIA) VALUES ('C', N'Phòng loại C', 200000);
GO
-- Insert data into PHONG
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'A');
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'A');
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'A');
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'A');
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'A');
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'B');
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'B');
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'B');
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'B');
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'B');
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'C');
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'C');
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'C');
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'C');
INSERT INTO PHONG (TINHTRANG, MALP) VALUES (N'Có sẵn', 'C');
GO

-- Insert data into PHIEUTHUEPHONG
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2023-03-14', 'PH012');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2023-05-17', 'PH005');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2023-05-20', 'PH013');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2023-06-10', 'PH005');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2023-06-27', 'PH015');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2023-07-02', 'PH013');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2023-08-21', 'PH011');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2023-11-03', 'PH003');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2023-12-24', 'PH004');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2024-01-11', 'PH011');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2024-01-23', 'PH015');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2024-02-02', 'PH005');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2024-02-10', 'PH013');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2024-02-28', 'PH002');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2024-03-24', 'PH015');
INSERT INTO PHIEUTHUEPHONG (NGAYLAPPHIEU, MAPHONG) VALUES ('2024-03-29', 'PH013');
GO

-- Insert data into CHITIETPTP
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT001', 'VN', N'Nguyễn Văn An', '123456789012', N'Hà Nội');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT002', 'VN', N'Trần Thị Bình', '098765432109', N'Long An');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT002', 'VN', N'Lê Thanh Phong', '094965432109', N'Đà Lạt');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT002', 'VN', N'Nguyễn Thành Trung', '093575432109', N'Đà Lạt');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT003', 'VN', N'Lê Văn Cường', '111122223333', N'Đà Nẵng');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT004', 'NN', N'John Smith', 'A123456789', N'Anh');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT005', 'VN', N'Ngô Văn Đức', '777788889999', N'Hà Nội');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT006', 'NN', N'Sakura Tanaka', 'C567890123', N'Nhật Bản');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT007', 'VN', N'Trịnh Văn Hùng', '555566667777', N'Vinh');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT008', 'VN', N'Đỗ Thị Lan', '888899990000', N'Khánh Hoà');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT009', 'NN', N'Emily Brown', 'E345678901', N'Úc');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT010', 'VN', N'Nguyễn Thị Nga', '000011112222', N'Tây Ninh');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT011', 'VN', N'Tran Van Phat', '333344445555', N'Đà Lạt');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT012', 'NN', N'Li Wei', 'K654321098', N'Đài Loan');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT013', 'VN', N'Phan Văn Sơn', '111199993333', N'Hồ Chí Minh');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT014', 'VN', N'Trần Thị Tuyết', '444400006666', N'Bình Dương');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT015', 'VN', N'Trần Văn Quốc', '777700009999', N'Đồng Nai');
INSERT INTO CHITIETPTP (MAPTP, MALKH, TENKHACHHANG, CMND, DIACHI) VALUES ('PT016', 'VN', N'Nguyễn Thị Minh', '222200004444', N'Bình Phước');
GO

-- Insert data into DICHVU
INSERT INTO DICHVU (TENDICHVU, TINHTRANG, DONGIA) VALUES (N'Giặt là', N'Có sẵn', 50000);
INSERT INTO DICHVU (TENDICHVU, TINHTRANG, DONGIA) VALUES (N'Ăn sáng', N'Có sẵn', 50000);
INSERT INTO DICHVU (TENDICHVU, TINHTRANG, DONGIA) VALUES (N'Buffet', N'Có sẵn', 200000);
INSERT INTO DICHVU (TENDICHVU, TINHTRANG, DONGIA) VALUES (N'Gym', N'Ngừng cung cấp', 250000);
INSERT INTO DICHVU (TENDICHVU, TINHTRANG, DONGIA) VALUES (N'Spa', N'Ngừng cung cấp', 500000);
INSERT INTO DICHVU (TENDICHVU, TINHTRANG, DONGIA) VALUES (N'Bể bơi', N'Có sẵn', 10000);
INSERT INTO DICHVU (TENDICHVU, TINHTRANG, DONGIA) VALUES (N'Dọn dẹp phòng', N'Có sẵn', 0);
GO

-- Insert data into CT_DANGKYDV
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV001', 'PT001', '2023-03-15');
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV001', 'PT002', '2023-05-18');
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV002', 'PT003', '2023-05-21');  
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV007', 'PT004', '2023-06-11');
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV001', 'PT005', '2023-06-28');
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV003', 'PT006', '2023-07-03'); 
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV007', 'PT007', '2023-08-22');
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV002', 'PT008', '2023-11-04');
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV002', 'PT009', '2023-12-25');
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV001', 'PT010', '2024-01-12');
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV001', 'PT011', '2024-01-24');
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV003', 'PT012', '2024-02-03');
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV007', 'PT013', '2024-02-11');
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV006', 'PT014', '2024-02-29');  
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV001', 'PT015', '2024-03-25');  
INSERT INTO CT_DANGKYDV (MADV, MAPTP, NGAYDANGKY) VALUES ('DV003', 'PT016', '2024-03-30');
GO

-- Insert data into HOADON
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2023-03-15', N'Nguyễn Văn An');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2023-05-18', N'Trần Thị Bình');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2023-05-21', N'Lê Văn Cường');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2023-06-11', N'John Smith');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2023-06-28', N'Ngô Văn Đức');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2023-07-03', N'Sakura Tanaka');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2023-08-22', N'Trịnh Văn Hùng');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2023-11-04', N'Đỗ Thị Lan');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2023-12-25', N'Emily Brown');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2024-01-12', N'Nguyễn Thị Nga');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2024-01-24', N'Tran Van Phat');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2024-02-03', N'Li Wei');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2024-02-11', N'Phan Văn Sơn');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2024-02-29', N'Trần Thị Tuyết');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2024-03-25', N'Tran Van Quoc');
INSERT INTO HOADON (NGAYLAPHD, KHTHANHTOAN) VALUES ('2024-03-30', N'Nguyen Thi Minh');
GO

-- Insert data into CT_HOADON
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD001', 'PT001');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD002', 'PT002');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD003', 'PT003');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD004', 'PT004');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD005', 'PT005');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD006', 'PT006');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD007', 'PT007');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD008', 'PT008');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD009', 'PT009');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD010', 'PT010');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD011', 'PT011');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD012', 'PT012');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD013', 'PT013');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD014', 'PT014');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD015', 'PT015');
INSERT INTO CT_HOADON (MAHD, MAPTP) VALUES ('HD016', 'PT016');
GO

--View--
--View QLPHONG--
CREATE VIEW QLPHONG AS
SELECT PHONG.MAPHONG, PHONG.MALP, PHONG.TINHTRANG, LOAIPHONG.DONGIA FROM PHONG, LOAIPHONG 
WHERE PHONG.MALP = LOAIPHONG.MALP
GO

--VIEW QL_PHIEUTHUEPHONG--
CREATE VIEW QL_PHIEUTHUEPHONG AS
SELECT ptp.MAPTP, ct.TENKHACHHANG, ct.CMND, ct.DIACHI,ptp.NGAYLAPPHIEU, ptp.MAPHONG, lp.MALP, lp.DONGIA
FROM PHIEUTHUEPHONG ptp, CHITIETPTP ct, PHONG p, LOAIPHONG lp
WHERE ptp.MAPTP = ct.MAPTP AND p.MAPHONG = ptp.MAPHONG AND lp.MALP = p.MALP AND NOT EXISTS (SELECT * FROM CT_HOADON WHERE CT_HOADON.MAPTP = ptp.MAPTP)
GO

--VIEW QL_DOANHTHU--
CREATE VIEW QL_DOANHTHU AS
SELECT BCDT.THANG, BCDT.NAM, lp.MALP, TILE, DOANHTHU, TONGDOANHTHU
FROM BCDT, CT_BCDT, HOADON hd, CT_HOADON cthd, PHIEUTHUEPHONG ptp, PHONG p, LOAIPHONG lp
WHERE BCDT.THANG = CT_BCDT.THANG AND BCDT.NAM = CT_BCDT.NAM 
AND YEAR(hd.NGAYLAPHD) = BCDT.NAM AND MONTH(hd.NGAYLAPHD) = BCDT.THANG
AND hd.MAHD = cthd.MAHD AND cthd.MAPTP = ptp.MAPTP
AND ptp.MAPHONG = p.MAPHONG AND p.MALP = lp.MALP
GO

--VIEW QL_HOADON--
CREATE VIEW QL_HOADON AS
SELECT hd.MAHD, cthd.MAPTP, hd.KHTHANHTOAN, hd.NGAYLAPHD, hd.TONGTIEN FROM HOADON hd, CT_HOADON cthd
WHERE hd.MAHD = cthd.MAHD
GO

--VIEW TT_ADDHOADON--
CREATE VIEW TT_ADDHOADON AS
SELECT ptp_all.MAPHONG, ptp_all.MAPTP, ISNULL(SUM(ctdkdv.DONGIA), 0) AS DONGIADICHVU
FROM (
    SELECT MAPTP, MAPHONG
    FROM PHIEUTHUEPHONG WHERE NOT EXISTS ( SELECT * FROM CT_HOADON WHERE MAPTP = PHIEUTHUEPHONG.MAPTP)
) ptp_all
LEFT JOIN CT_DANGKYDV ctdkdv ON ptp_all.MAPTP = ctdkdv.MAPTP 
GROUP BY ptp_all.MAPTP, ptp_all.MAPHONG;
GO

--VIEW PTP_CHITIETDICHVU--
CREATE VIEW PTP_CHITIETDICHVU AS
SELECT PHIEUTHUEPHONG.MAPTP, PHIEUTHUEPHONG.MAPHONG, CHITIETPTP.TENKHACHHANG, CHITIETPTP.CMND, CHITIETPTP.DIACHI
FROM PHIEUTHUEPHONG JOIN CHITIETPTP ON PHIEUTHUEPHONG.MAPTP = CHITIETPTP.MAPTP
WHERE NOT EXISTS (SELECT * FROM CT_HOADON WHERE CT_HOADON.MAPTP = PHIEUTHUEPHONG.MAPTP)
GO

--VIEW TT_PTP_DKDV--
CREATE VIEW TT_PTP_DKDV AS
SELECT MAPHONG, MAPTP
FROM PHIEUTHUEPHONG WHERE NOT EXISTS ( SELECT * FROM CT_HOADON WHERE MAPTP = PHIEUTHUEPHONG.MAPTP)
GO

--VIEW TT_DV_DKDV--
CREATE VIEW TT_DV_DKDV AS
SELECT dv.MADV, dv.TENDICHVU, dv.DONGIA ,ctdkdv.NGAYDANGKY
FROM 
(
    SELECT MAPTP, MAPHONG
    FROM PHIEUTHUEPHONG WHERE NOT EXISTS ( SELECT * FROM CT_HOADON WHERE MAPTP = PHIEUTHUEPHONG.MAPTP)
) ptp_all JOIN CT_DANGKYDV ctdkdv ON ptp_all.MAPTP = ctdkdv.MAPTP
RIGHT JOIN DiCHVU dv ON dv.MADV = ctdkdv.MADV
WHERE TINHTRANG = N'Có sẵn'
GO

--VIEW PTP_CT_HD
CREATE VIEW PTP_CT_HD AS
SELECT ptp.MAPTP, ptp.MAPHONG, ct.MAHD, ptp.NGAYLAPPHIEU, LOAIPHONG.DONGIA FROM PHIEUTHUEPHONG ptp
JOIN PHONG ON ptp.MAPHONG = PHONG.MAPHONG
JOIN LOAIPHONG ON LOAIPHONG.MALP = PHONG.MALP
LEFT JOIN CT_HOADON ct ON ptp.MAPTP = ct.MAPTP
GO

--VIEW HD_PTP
CREATE VIEW HD_PTP AS
SELECT hd.MAHD, ptp.MAPTP, hd.NGAYLAPHD, hd.TONGTIEN FROM HOADON hd
JOIN CT_HOADON ct ON hd.MAHD = ct.MAHD
JOIN PHIEUTHUEPHONG ptp ON ptp.MAPTP = ct.MAPTP
GO

--VIEW BC_DT
CREATE VIEW BCDT_THANG_NAM AS
SELECT CT_BCDT.THANG, CT_BCDT.NAM, CT_BCDT.MALP, CT_BCDT.DOANHTHU, CT_BCDT.TILE, CT_BCDT.DOANHTHU AS DOANHTHUPHONG, BCDT.TONGDOANHTHU
FROM CT_BCDT JOIN BCDT ON CT_BCDT.NAM = BCDT.NAM AND CT_BCDT.THANG = BCDT.THANG
GO